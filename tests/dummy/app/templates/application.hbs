<div class="container">
  <h1 id="title">ui-image</h1>
  <h2>A simple image wrapper with sugar sprinkled on top</h2>

  <ul>
    <li><a href="https://github.com/lifegadget/ui-image">GitHub Repo</a></li>
    <li><a href="tests?nocontainer">Unit tests</a></li>
  </ul>

<p><br></p>

  {{#ui-markdown style='github'}}
  # Installation and Dependencies

  ```javascript
  ember install ui-image
  ```

  All dependencies will be installed for you but they are worth being aware of:

  #####Helpers

    - [`ember-truth-helpers`](https://github.com/jmurphyau/ember-truth-helpers) - a great set of logic helpers
    - [`ember-array-contains-helper`](https://github.com/bmeurant/ember-array-contains-helper) - a single helper but a duesy

  ######Mixins
    - [`ember-cli-stylist`]() - allows for the component to provide style attributes to your API surface in a safe and efficient manner

  # Demo
  {{/ui-markdown}}

  <div class="row">
    <div class="col-xs-12 col-md-7">
      {{#ui-markdown style='github'}}
      ### Basic Load, Aspect Ratios, and Masking

      ```handlebars
      \{{ui-image 'images/actress.png'}}
      ```

      Things to be aware of here are:

      - the component's "src" is a _positional parameter_ so just put the source in quotes, no need to reference `src` directly
      - since width and/or height were not specified it will calculate an "assumed" height and width by choosing the parent's available width and then using the default `aspect` (discussed below) of 3:2.
      - In this case this is NOT the right aspect ratio for the image. Of course usually the best answer is supply both height and width -- but not always
      - Look at the CSS and note that a `.aspect-adjusted` class has been added if you need to trigger any styling off of that

      {{/ui-markdown}}
    </div>
    <div class="col-xs-12 col-md-5 text-center">
      {{ui-image 'images/actress.png'
        useSpinner=true
        display=display
        mask=mask
      }}
      <p>
        <br>
      </p>
      <p class="align-center">
        {{ui-buttons
          buttons='Default,Cover,Contain,Clip'
          cardinality='1:1'
          mood='primary'
          textAlign='center'
          values=aspectConfig
          onChange=(action 'onAspectChange')
        }}
      </p>
      <p class="align-center">
        {{ui-buttons
          buttons='None,Circle,Rounded,pow,star,cross'
          cardinality='1:1'
          mood='info'
          textAlign='center'
          values=maskConfig
          onChange=(action 'onMaskChange')
        }}
      </p>
    </div>
    <div class="col-xs-12">
      {{#ui-markdown style='github'}}

      - If we do want to maintain the aspect ratio but not have the _stretchy_ effect we have a few options that you can play with in the radio buttons to the right. Just set `display` to any of the listed values to get the effect. Some of you may notice that this is really just the CSS `object-fit` property (although "none" â†’ "clip" in `display`); regardless you can use either property (the idea was initially to allow display to perform polyfils for browsers that don't support it but supports getting better and I've got better things to do).

      ### Masking and Clip Paths
      This addon gives you a few handy options _masking_ that use a combination of the `clip-path`, `mask`, and the plain old `border-radius`.
      {{/ui-markdown}}
    </div>
  </div>

  <div class="row">
    <div class="col-xs-12 col-md-7">
      {{#ui-markdown style='github'}}
      ### Intermediate Image

      ```handlebars
      \{{ui-image 'images/drinking-coffee.jpg' initialSrc='images/drinking-coffee_init'}}
      \{{ui-image 'images/drinking-coffee.jpg' useLowRes=true}}
      ```
      In this case we have a very large image "drinking-coffee" (900kb) and rather than wait for it to load we instead will load a file of the same dimensions but with a strong gausian blur which brings it down to 120kb. Eventually when the high-resolution image is available it will show up.

      Note the two signatures above. They both produce the same results and in most cases you'll probably want the DRYer syntax provided by the latter one. By default this just adds a "\_init" to the end of the filename to distinquish but if you want a different _postfix_ or a _prefix_ that is possible by changing the `lowResPrefix` and `lowResPostfix` properties respectively. While you could do this on a per instance basis that would quickly get tiring and instead the intended target would to set it in your `environments.js` config file:


      {{/ui-markdown}}
    </div>
    <div class="col-xs-12 col-md-5">
      {{ui-image 'images/drinking-coffee.jpg' useLowRes=true backgroundColor='#D6D7DA'}}
    </div>
  </div>


  <p>&nbsp;</p>
  <h3 class="col-xs-12">Clipping</h3>

  <examples class="flexy">
    <columns>
      <column style="margin: 15px">
        {{ui-image src=imageSrc borderMask=borderMask size='100%' clip=clip clipHover=clip}}
    </column>
    <column>
      <p>&nbsp;</p>
      <desc>
        This is just a first pass at supporting clipping paths. The idea would be to add a few more defaults and then allow easy inline SVG
        to be added too. For now enjoy the only example I have so far.
      </desc>
      <desc>
          Clipping: {{ui-buttons buttons='pow,cross,left,right,star' value=clip}}
      </desc>
      <desc>
        Of course clipping is not a universal browser sport so best to stay <strikethrough>safe</strikethrough> informed: <a href="http://caniuse.com/#feat=css-clip-path">caniuse</a>.
      </desc>
      <codewindow>
        \{{<strong>ui-image</strong>&nbsp;
          src='{{imageSrc}}'
          {{#if useSize}} size='{{explicitSize}}'
        {{/if}}clip='{{clip}}' clipHover='{{clip}}'
      }}
      </codewindow>
    </column>
  </columns>
</examples>



</div>
